# Just a simple example of a plot manipulation, based on pressure dataset
pressure %>% ggvis(~temperature, ~pressure, stroke := "red", strokeWidth := 2, strokeDash := 6) %>% layer_lines()
pressure %>% ggvis(~temperature, ~pressure, size = ~pressure, fill := "green", opacity = ~temperature) %>% layer_points()

# := OPERATOR
# The difference between = and := operators:
# = MAPS property onto variable,
# := SETS property to be equal to a given value

# PIPING is very useful here since there are many arguments and properties to the ggvis and it's easy to generate unreadable code

# DATA SPACE VS. VISUAL SPACE - important difference. Graphs are just data space values translated into visual space values.
# Variables are "located" in data space and properties are "located" in visual space and need visual values, e.g. pixels, colors.

# MAPS
# ggvis helps in creating maps - i'm able to connect data points in a specific order so that they create polygons
library("maps")
texas <- ggplot2::map_data("state", region = "texas")
texas %>% ggvis(~long, ~lat, fill := "darkorange") %>% layer_paths()

# In this one i'm trying to walk through what layer_smooths() does, i.e. first i'm using compute_smooths()
# to create a set of coordinates that could be depicted as points, and second, i'm plotting those coordinates
# with column ~pred_ as x and column ~resp_ as y. 
# compute_smooths() always returns data.frame with columns pred_ and resp_, that is why the order of columns
# in compute_smooths() 2nd argument is y(resp_) ~ x(pred_) - i'm predicting y with x.
mtcars %>% compute_smooth(mpg ~ wt) %>% ggvis(~ pred_, ~resp_) %>% layer_lines

# HISTOGRAM
# Here i'm doing similar trick as above, but this time i'm walking through histogram.
# First i'm using compute_bin(), which gives me data.frame with columns count_, x_, xmin_ and xmax_.
faithful %>% compute_bin(~ waiting, width = 5)

# Then i'm adding layer_rects() which builds rectangles based on coordinates from compute_bin()
faithful %>% compute_bin(~ waiting, width = 5) %>% ggvis(x = ~ xmin_, x2 = ~ xmax_, y = ~ 0, y2 = ~ count_) %>% layer_rects()

# DENSITY PLOT
# Same trick, but with density plot. First compute_density(), then plotting pred_ and resp_ columns, then layer_lines()
faithful %>% compute_density(~ waiting) %>% ggvis(x = ~ pred_, y = ~ resp_) %>% layer_lines()

# Building the same plot, but using layer_densities() directly. Ofc, fill property is totally optional.
faithful %>% ggvis(~ waiting, fill := "green") %>% layer_densities()

# NB: if we want to build a plot from scratch, here's the template: dataset %>% compute_<summary>() %>% layer_<marks>().
# if we want to use the layer directly, here's the template: dataset %>% ggvis() %>% layer_<summary>()

# Here i just want to calculate the count values for each amount of cylinders. 
# I'm using compute_count() - it will give me a data.frame with columns count_ and x_.
mtcars %>% compute_count(~factor(cyl))

# GGVIS FEAT. DPLYR
# Dplyr and ggvis packages work together very well. Hence, i can use various dplyr functions, such as group_by,
# for the purpose of creating cool plots. NB: i don't use tilde syntax for group_by()
# since this function is not in ggvis package. Another thing worth remembering: i should use factor version
# of my grouping variable because it hepls with plotting (e.g., legend is created).
mtcars %>% group_by(cyl) %>% ggvis(~mpg, fill = ~factor(cyl)) %>% layer_densities()

# Here i'm additionally using interaction() to make sure that the property i'm mapping is mapped on
# all possible combinations of grouping variables (in case there are more than one grouping variable).
# It makes the plot more readable since each group has its own property - fill in this case.
mtcars %>% group_by(cyl, am) %>% ggvis(~mpg, fill = ~interaction(cyl, am)) %>% layer_densities()
# You don't want to mix up group_by() and interaction(). The former is used to group observations,
#  while the latter allows you to specify properties.

# AXES AND LEGENDS
# add_axis() function allows me to change properties of existing axes, such as rename or add labeled and unlabeled ticks.
# It also allows me to add additional axes.
faithful %>% 
  ggvis(~waiting, ~eruptions) %>% 
  layer_points() %>% 
  add_axis("y", title = "Duration of eruption (m)", 
          values = c(2, 3, 4, 5), subdivide = 9) %>% 
  add_axis("x", title = "Time since previous eruption (m)",
            values = c(50, 60, 70, 80, 90), subdivide = 9)

# Here i'm just adding some more properties, e.g. orientation of axes.
faithful %>% 
  ggvis(~waiting, ~eruptions) %>% 
  layer_points() %>%
  add_axis("x", orient = "top") %>%
  add_axis("y", orient = "right")

# When i want to add a legend, what i need to remember is that i should specify the properties for which
# i want to create a legend (i can also join properties names in a vector using c()). Example below:
faithful %>% 
  ggvis(~waiting, ~eruptions, opacity := 0.6, 
        fill = ~factor(round(eruptions))) %>% 
  layer_points() %>% 
  add_legend("fill", title = "~ duration (m)", orient = "left") 
  # First argument is "fill", not "title". 

# ADDING MY OWN SCALES  
# Quite often i will want to customize my graph by colouring it some more.
# I can do that by adding my own scale that will map a variable to a property, e.g. 
# a numeric variable ~disp (hence scale_numeric()) to fill property.
# Other scales: scale_datetime(), scale_logical(), scale_nominal(), scale_singular()
mtcars %>% 
  ggvis(~wt, ~mpg, fill = ~disp, stroke = ~disp, strokeWidth := 2) %>%
  layer_points() %>%
  scale_numeric("fill", range = c("red", "yellow")) %>%
  scale_numeric("stroke", range = c("darkred", "orange"))

# Sometimes, if i map one of the variables to opacity, points could get too transparent to actually be seen.
# I can avoid that by limiting the range of opacity, like in the example below.
mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~factor(cyl), opacity = ~hp) %>%
  layer_points() %>%
  scale_numeric("opacity", range = c(0.2, 1))
  
# I may also want to play with the range of x/y axes, e.g. in order to show some more context.
mtcars %>% ggvis(~wt, ~mpg, fill = ~disp) %>%
  layer_points() %>%
  scale_numeric("y", domain = c(0, NA)) %>%
  scale_numeric("x", domain = c(0, 6))

